import { createApp } from 'vue'
import App from './App.vue'
import router from './router'
import './index.css'

window.ChequeABI = [
  "function encryptionPubkeys(address) external view returns (uint)",
  "function getChequeContent(uint id) external view returns (address coinType, uint96 amount, address drawer, uint64 deadline, bytes32 passphraseHash)",
  "function setEncryptionPubkey(uint key, address referee) external",
  "function unsetEncryptionPubkey() external",
  "function writeCheques(address[] calldata payeeList, address coinType, uint96 amount, uint64 deadline, uint[] calldata passphraseHashList, bytes[] calldata memoList) external payable",
  "function writeCheque(address payee, address coinType, uint96 amount, uint64 deadline, uint passphraseHash, bytes calldata memo) external payable",
  "function revokeCheques(uint[] calldata idList) external",
  "function revokeCheque(uint id) public",
  "function acceptCheques(uint[] calldata idList, bytes calldata passphrase) external",
  "function refuseCheques(uint[] calldata idList) external",
  "function acceptCheque(uint id, bytes calldata passphrase) external",
  "function refuseCheque(uint id) external"]

window.chequeBytecode = "0x608060405234801561001057600080fd5b50610f3d806100206000396000f3fe60806040526004361061007b5760003560e01c8063743874451161004e578063743874451461016257806393adf36c146101825780639b9f057f14610195578063cbc1228d146101b557600080fd5b8063163e7c621461008057806335cb33db146100a257806353773916146100e25780636653637f1461014d575b600080fd5b34801561008c57600080fd5b506100a061009b366004610dfe565b6101d5565b005b3480156100ae57600080fd5b506100cf6100bd366004610ce8565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156100ee57600080fd5b506101026100fd366004610dfe565b6101f3565b604080516001600160a01b0396871681526001600160601b0395909516602086015292909416918301919091526001600160401b03166060820152608081019190915260a0016100d9565b34801561015957600080fd5b506100a061022e565b34801561016e57600080fd5b506100a061017d366004610dfe565b610268565b6100a0610190366004610d0a565b6102b7565b3480156101a157600080fd5b506100a06101b0366004610db2565b61077d565b3480156101c157600080fd5b506100a06101d0366004610e30565b6108b2565b604080516000808252602082019092526101f09183916108f9565b50565b60008060008060008061020587610af5565b8051602082015160408301516060840151608090940151929b919a509850919650945092505050565b33600081815260016020526040808220829055517f28f1a757c69b495383be7a1dfeb83d7d39c412913818674809b4fbac919e7aae9190a2565b3360008181526001602052604090819020839055517f639576cee33ad72fb31ed7fc83bd9241adc39242ccbe6679f18e3954f80d2a7a906102ac9084815260200190565b60405180910390a250565b42846001600160401b0316116103075760405162461bcd60e51b815260206004820152601060248201526f696e76616c69642d646561646c696e6560801b60448201526064015b60405180910390fd5b6001600160a01b03871660009081526001602052604090205461035c5760405162461bcd60e51b815260206004820152600d60248201526c6e6f2d656e632d7075626b657960981b60448201526064016102fe565b6001600160a01b0387164360201b175b60008181526020818152604091829020825160a08101845281546001600160a01b038082168352600160a01b918290046001600160601b031694830194909452600183015493841694820194909452929091046001600160401b031660608301819052600290910154608090920191909152156103f557806103ed81610ed6565b91505061036c565b6040805160a0810182526000602082015233918101919091526001600160401b03861660608201526001600160a01b038816808252608082018690526001600160601b03881690612711141561049357876001600160601b0316341461048e5760405162461bcd60e51b815260206004820152600e60248201526d0ecc2d8eaca5adad2e6dac2e8c6d60931b60448201526064016102fe565b61066b565b34156104d15760405162461bcd60e51b815260206004820152600d60248201526c0c8dedce85ae6cadcc85ac4c6d609b1b60448201526064016102fe565b81516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561051457600080fd5b505afa158015610528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054c9190610e17565b83516040516323b872dd60e01b81523360048201523060248201526001600160601b038c1660448201529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b1580156105a657600080fd5b505af11580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de9190610ddc565b5082516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561062257600080fd5b505afa158015610636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065a9190610e17565b90506106668282610ebf565b925050505b6001600160601b03811660208301526106f28383600091825260208281526040928390208251918301516001600160601b0316600160a01b9081026001600160a01b039384161782559383015160018201805460608601516001600160401b03169096026001600160e01b0319909616919093161793909317905560800151600290910155565b604080516bffffffffffffffffffffffff1960608c901b166001600160601b038b16179133901b6001600160401b038a16179085906001600160a01b038e16907f7c612190c880f84df8b29e18ea3ab121d2d6337ef14d161f507d9cf345d701d29061076790869086908e908e908e90610e7b565b60405180910390a3505050505050505050505050565b600061078882610af5565b905080606001516001600160401b0316600014156107dc5760405162461bcd60e51b81526020600482015260116024820152706368657175652d6e6f742d65786973747360781b60448201526064016102fe565b4281606001516001600160401b0316106108305760405162461bcd60e51b81526020600482015260156024820152747374696c6c2d6265666f72652d646561646c696e6560581b60448201526064016102fe565b60008281526020819052604081208181556001810180546001600160e01b0319169055600201556108778160000151826040015183602001516001600160601b0316610b8e565b60405182906001600160a01b038516907f498382dc758b987be80f8c9373d6d2c32509c955d7496ac3560fe7c832fb02cd90600090a3505050565b6108f483600184848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506108f992505050565b505050565b33606084901c146109385760405162461bcd60e51b81526020600482015260096024820152686e6f742d706179656560b81b60448201526064016102fe565b600061094384610af5565b905080606001516001600160401b0316600014156109975760405162461bcd60e51b81526020600482015260116024820152706368657175652d6e6f742d65786973747360781b60448201526064016102fe565b80606001516001600160401b03164211156109e55760405162461bcd60e51b815260206004820152600e60248201526d61667465722d646561646c696e6560901b60448201526064016102fe565b338315610a7757608082015115610a45578251602084012060808301518114610a435760405162461bcd60e51b815260206004820152601060248201526f77726f6e672d7061737370687261736560801b60448201526064016102fe565b505b604051859033907f917b75dc2ba1f71d686e1c0a6d23ee1ce1dbf74fd6a321538520e805b419b11b90600090a3610aab565b506040808201519051859033907f4dbe344e3bc0399b7470ba6f976610e66f705c494e65f6feebdd154b16ce8d0590600090a35b60008581526020819052604081208181556001810180546001600160e01b031916905560020155610aee82600001518284602001516001600160601b0316610b8e565b5050505050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091525060009081526020818152604091829020825160a08101845281546001600160a01b038082168352600160a01b918290046001600160601b031694830194909452600183015493841694820194909452929091046001600160401b0316606083015260020154608082015290565b6001600160a01b0383166127111415610bfc576040516001600160a01b038316906123289083906000818181858888f193505050503d8060008114610bef576040519150601f19603f3d011682016040523d82523d6000602084013e610bf4565b606091505b505050505050565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b158015610c4657600080fd5b505af1158015610c5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7e9190610ddc565b50505050565b80356001600160a01b0381168114610c9b57600080fd5b919050565b60008083601f840112610cb257600080fd5b5081356001600160401b03811115610cc957600080fd5b602083019150836020828501011115610ce157600080fd5b9250929050565b600060208284031215610cfa57600080fd5b610d0382610c84565b9392505050565b600080600080600080600060c0888a031215610d2557600080fd5b610d2e88610c84565b9650610d3c60208901610c84565b955060408801356001600160601b0381168114610d5857600080fd5b945060608801356001600160401b038082168214610d7557600080fd5b9094506080890135935060a08901359080821115610d9257600080fd5b50610d9f8a828b01610ca0565b989b979a50959850939692959293505050565b60008060408385031215610dc557600080fd5b610dce83610c84565b946020939093013593505050565b600060208284031215610dee57600080fd5b81518015158114610d0357600080fd5b600060208284031215610e1057600080fd5b5035919050565b600060208284031215610e2957600080fd5b5051919050565b600080600060408486031215610e4557600080fd5b8335925060208401356001600160401b03811115610e6257600080fd5b610e6e86828701610ca0565b9497909650939450505050565b85815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b600082821015610ed157610ed1610ef1565b500390565b6000600019821415610eea57610eea610ef1565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212209566198b018a8cc10d0ec2a608d187fe1ce958edc95e3bd861d6acc3a596629c64736f6c63430008060033"
	
window.ChequeContractAddress = "0xB5E6F297Dc395CF77686dE57C23052f55aa088cd"

window.SEP20ABI = [
    "function name() view returns (string)",
    "function symbol() view returns (string)",
    "function decimals() view returns (uint8)",
    "function totalSupply() external view returns (uint256)",
    "function balanceOf(address account) external view returns (uint256)",
    "function transfer(address recipient, uint256 amount) external returns (bool)",
    "function allowance(address owner, address spender) external view returns (uint256)",
    "function approve(address spender, uint256 amount) external returns (bool)",
    "function transferFrom(address sender, address recipient, uint256 amount) external returns (bool)",
    "event Transfer(address indexed from, address indexed to, uint256 value)",
    "event Approval(address indexed owner, address indexed spender, uint256 value)"]

window.alertNoWallet = () => {
      alert("No wallet installed! Please install MetaMask or other web3 wallet to use this App.");
}

if (typeof window.ethereum === 'undefined') {
  alertNoWallet()
} else {
  ethereum.request({ method: 'eth_requestAccounts' })
}

window.getSEP20AddrAndSymbol = async function(line) {
      var trimmed = line.trim()
      if(trimmed.length!=42) {//not hex, so it is a symbol
         const hexAddr = localStorage.getItem("coin-"+trimmed)
	 if(trimmed === null) {
	   alert("Cannot find "+trimmed+"'s address in history. Please enter a HEX address.")
	   return [null, null]
	 }
	 trimmed = hexAddr
      }
      var sep20Addr, symbol;
      try {
        sep20Addr = ethers.utils.getAddress(trimmed)
      } catch(e) {
        alert("Invalid Address: "+trimmed)
	return [null, null]
      }
      const sep20Contract = new ethers.Contract(sep20Addr, SEP20ABI, provider)
      try {
        symbol = await sep20Contract.symbol()
      } catch(e) {
        alert("Not an SEP20 Address: "+sep20Addr)
	return [null, null]
      }
      localStorage.setItem("coin-"+symbol, sep20Addr)
      return [sep20Addr, symbol]
}

createApp(App).use(router).mount('#app')

// ABC: 0xcbfe5fdc8d21b1bf199f7d2a19910452989de9b6

